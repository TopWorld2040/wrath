WRATHTextAttributePacker:

  Change interface as follows:
   - generates an attribute packer given number of custom_floats of glyph_data
     --> returned objects will use virtual methods of derived object to get job done
         * attribute names (returned names will also have custom data tacked on)
         * attribute packing (will also pack the custom data as well)
         * not clear if custom data should come first or last.

WRATHFontShaderSpecifier:

   - make it so that it automagically generates the GLSL function to create the
     simple array of the custom float data; document this function(!) 
   - Document that this comes from TextAttributePacker convention, or make
     the implementation part of WRATHTextAttributePacker
 

WRATHTextureFont:
   - number of custom data's must be constant for entire font,
     as such make it a virtual function too.
   - kill all the minified API in glyph_data_type


Kill WRATHTextureFont_Mix:
   - To get minified fonts, compute LOD in fragment shader, if LOD is not 0, 
     then get the coverage from the actual font.
     * For Analytic: make mipmaps so that mipmap level>=1 stored just a coverage
       value in one of the locations, for example one the channels holding normals.
     * For Distance, mimpap level >=1 holds coverage instead of distance values
     * For CurveAnalytic: index texture for mipmap level >=1 stores coverage.
     * Detailed coverage: no point.

   This has advantage of keeping the font API simple at expense that font
   classes are ickier.


  
